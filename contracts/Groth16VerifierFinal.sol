// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.10;

contract Groth16Verifier {
    struct ECPoint {
        uint256 x;
        uint256 y;
    }

    struct ECPoint2 {
        uint256[2] x;
        uint256[2] y;
    }

    uint256 constant FIELD_MOD = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    function _neg(ECPoint memory pt) private pure returns (ECPoint memory) {
        if (pt.x == 0 && pt.y == 0)
            return pt;
        else
            return ECPoint(pt.x, (FIELD_MOD - pt.y) % FIELD_MOD);
    }

    function ecAdd(ECPoint memory p1, ECPoint memory p2) internal view returns (ECPoint memory add_result) {
        uint256[4] memory input = [p1.x, p1.y, p2.x, p2.y];
        bool success;
        assembly {
            success := staticcall(gas(), 0x06, input, 0xc0, add_result, 0x60)
        }
        require(success, "add failed");
    }

    function ecMul(ECPoint memory p, uint256 s) internal view returns (ECPoint memory mul_result) {
        uint256[3] memory input = [p.x, p.y, s];
        bool success;
        assembly {
            success := staticcall(gas(), 0x07, input, 0x80, mul_result, 0x60)
        }
        require(success, "mul failed");
    }

    function verify(ECPoint memory A1, ECPoint2 memory B2, ECPoint memory C1, uint256[2] memory public_inputs) public view returns (bool) {
        ECPoint memory alpha1 = ECPoint(1368015179489954701390400359078579693043519447331113978918064868415326638035, 9918110051302171585080402603319702774565515993150576347155970296011118125764);
        ECPoint2 memory beta2 = ECPoint2([2725019753478801796453339367788033689375851816420509565303521482350756874229, 7273165102799931111715871471550377909735733521218303035754523677688038059653],[2512659008974376214222774206987427162027254181373325676825515531566330959255, 957874124722006818841961785324909313781880061366718538693995380805373202866]);
        ECPoint2 memory gamma2 = ECPoint2([20954117799226682825035885491234530437475518021362091509513177301640194298072, 4540444681147253467785307942530223364530218361853237193970751657229138047649], [21508930868448350162258892668132814424284302804699005394342512102884055673846, 11631839690097995216017572651900167465857396346217730511548857041925508482915]);
        ECPoint2 memory delta2 = ECPoint2([10191129150170504690859455063377241352678147020731325090942140630855943625622, 12345624066896925082600651626583520268054356403303305150512393106955803260718],[16727484375212017249697795760885267597317766655549468217180521378213906474374, 13790151551682513054696583104432356791070435696840691503641536676885931241944]);

        // The powers of tau for public inputs
        ECPoint[2] memory IC = [
            ECPoint(1734927732345068694301515209562532239318600504317180308729057773769848558699, 19722566664570487528650939874173356232826447202146540143123675137388417037501),
            ECPoint(6438840577582292625162118885091812192178203930942724297089946023082472068656, 5493842616449798024334563058642067236932794156239635055798105809241989463253)
        ];
        
        ECPoint memory negA1 = _neg(A1);

        ECPoint memory X1 = ecAdd(ecMul(IC[0], public_inputs[0]), ecMul(IC[1], public_inputs[1]));

        uint256[24] memory input = [
            negA1.x,
            negA1.y,
            B2.x[1],
            B2.x[0],
            B2.y[1],
            B2.y[0],
            alpha1.x,
            alpha1.y,
            beta2.x[1],
            beta2.x[0],
            beta2.y[1],
            beta2.y[0],
            X1.x,
            X1.y,
            gamma2.x[1],
            gamma2.x[0],
            gamma2.y[1],
            gamma2.y[0],
            C1.x,
            C1.y,
            delta2.x[1],
            delta2.x[0],
            delta2.y[1],
            delta2.y[0]
        ];

        bool success = false;
        assembly {
            success := staticcall(gas(), 0x08, input, mul(24, 0x20), input, 0x20)
        }

        require(success, "pairing failed");

        return success;
    }

    // -- Testing function --
    // function verify_hardcode() public view returns (bool){
    //     ECPoint memory alpha1 = ECPoint(1368015179489954701390400359078579693043519447331113978918064868415326638035, 9918110051302171585080402603319702774565515993150576347155970296011118125764);
    //     ECPoint2 memory beta2 = ECPoint2([2725019753478801796453339367788033689375851816420509565303521482350756874229, 7273165102799931111715871471550377909735733521218303035754523677688038059653],[2512659008974376214222774206987427162027254181373325676825515531566330959255, 957874124722006818841961785324909313781880061366718538693995380805373202866]);
    //     ECPoint2 memory gamma2 = ECPoint2([20954117799226682825035885491234530437475518021362091509513177301640194298072, 4540444681147253467785307942530223364530218361853237193970751657229138047649], [21508930868448350162258892668132814424284302804699005394342512102884055673846, 11631839690097995216017572651900167465857396346217730511548857041925508482915]);
    //     ECPoint2 memory delta2 = ECPoint2([10191129150170504690859455063377241352678147020731325090942140630855943625622, 12345624066896925082600651626583520268054356403303305150512393106955803260718],[16727484375212017249697795760885267597317766655549468217180521378213906474374, 13790151551682513054696583104432356791070435696840691503641536676885931241944]);
        
    //     // - curve_order = 79 -
    //     // ECPoint[2] memory IC = [
    //     //     ECPoint(9836339169314901400584090930519505895878753154116006108033708428907043344230, 2085718088180884207082818799076507077917184375787335400014805976331012093279),
    //     //     ECPoint(10609540540875827932797320455850052859827897498153948414964160013685734487046, 4813993645475805825314378837641334666424083557311142113454529369033402933209)
    //     // ];
    //     // ECPoint memory A1 = ECPoint(3049458282876351949905161699834045849808138168831760221545422864658552527014, 3709056646608094442484998827920660902846496351471463522881083715766825552293);
    //     // ECPoint2 memory B2 = ECPoint2([20349551007043735336254173840421709567230668359831461402932114242848569235513, 6328776563933058463351784707460307891410296691416026733384833617000436684698], [15587504941299754621610294618526996060235709057179179406000103472095392038719, 13967437475673850146947127344174047713271427924343178297454774939390105270774]);
    //     // ECPoint memory C1 = ECPoint(16986903608833213817287786851259384358441492924675860932572882763985156743309, 3444945400608720671441556602757007563092277937000816893766835304387918066098);
    //     // ECPoint memory X1 = ECPoint(18587428445642033631338537397147383656721839918580451362120652966438015285636, 19703236547081592141477027762798685781959496329240460924562326370139833697087);

    //     // - full curve_order -
    //     ECPoint memory A1 = ECPoint(15680406076562801381635125319453106107648370323886559360181605249012620636964, 13176697411767794364333816144300232250542774741572411008815460979398685586769);
    //     ECPoint2 memory B2 = ECPoint2([13073525691287082866664950239020393240334790349234521070486092939326837638541, 20651369313542434978135536638303471530756970930820938061930816484487202223351], [10489383376546095588456135178802650255019541870105886033695889051435953416263, 2723204324482818044723232544430788957073153848572393982402776140177937389700]);
    //     ECPoint memory C1 = ECPoint(5307578001677396555749923457654944400558104983433536584403923225859457571889, 16858129556954286137653038275682446122957923525235879780218522125828679158660);
    //     ECPoint memory X1 = ECPoint(18465497560136898649349862631868982820195231304733932089463967936751534843131, 14793737618932266199548383535798175564665976939040406601404596478408826613310);

    //     // delta2 ((10191129150170504690859455063377241352678147020731325090942140630855943625622, 12345624066896925082600651626583520268054356403303305150512393106955803260718), (16727484375212017249697795760885267597317766655549468217180521378213906474374, 13790151551682513054696583104432356791070435696840691503641536676885931241944))
    //     // gamma2 ((20954117799226682825035885491234530437475518021362091509513177301640194298072, 4540444681147253467785307942530223364530218361853237193970751657229138047649), (21508930868448350162258892668132814424284302804699005394342512102884055673846, 11631839690097995216017572651900167465857396346217730511548857041925508482915))
    //     // IC [(1734927732345068694301515209562532239318600504317180308729057773769848558699, 19722566664570487528650939874173356232826447202146540143123675137388417037501), (6438840577582292625162118885091812192178203930942724297089946023082472068656, 5493842616449798024334563058642067236932794156239635055798105809241989463253)]
    //     // a1 (4901050871972972562605443632468387227783387614702303882591392935201814775341, 20312932524351303414576922976741101157858455238133567772787189257841927779384)
    //     // b2 ((1445034305379725642892653031810184740989593537249867729773519787263560326046, 8859587225993655528729759850452404148854094368575289120491341644748430298245), (6864047997514140551665176985892659361981845897461364892876820214226378200590, 17687668751559006212873486693604114344505926737715543902955784916344747313095))
    //     // c1 (7989953709135687181891893910352854673034192691383979299012840600506376926692, 9663611419843701475130199299267905436796896981636981791645415315642821263923)
    //     // x1 (19922113936245089026658469092826272576974424386430477803406046760132823831662, 16098390446283387349008855616864999349730141926790520165127534603683779603830)

    //     ECPoint memory negA1 = _neg(A1);

    //     uint256[24] memory input = [
    //         negA1.x,
    //         negA1.y,
    //         B2.x[1],
    //         B2.x[0],
    //         B2.y[1],
    //         B2.y[0],
    //         alpha1.x,
    //         alpha1.y,
    //         beta2.x[1],
    //         beta2.x[0],
    //         beta2.y[1],
    //         beta2.y[0],
    //         X1.x,
    //         X1.y,
    //         gamma2.x[1],
    //         gamma2.x[0],
    //         gamma2.y[1],
    //         gamma2.y[0],
    //         C1.x,
    //         C1.y,       
    //         delta2.x[1],
    //         delta2.x[0],
    //         delta2.y[1],
    //         delta2.y[0]
    //     ];

    //     bool success = false;
    //     assembly {
    //         success := staticcall(gas(), 0x08, input, mul(24, 0x20), input, 0x20)
    //     }
    //     return success;
    // }
}